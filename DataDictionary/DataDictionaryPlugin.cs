using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;
using System.ServiceModel;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Xml;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Messages;

namespace DataDictionary
{
    public class DataDictionaryPlugin : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            ITracingService tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            try
            {
                var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
                var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                var service = serviceFactory.CreateOrganizationService(context.UserId);

                tracingService.Trace("Starting DataDictionaryPlugin execution.");

                var solutionName = context.InputParameters.Contains("SolutionName") ? context.InputParameters["SolutionName"] as string : null;
                if (string.IsNullOrEmpty(solutionName))
                    throw new InvalidPluginExecutionException("SolutionName parameter is required.");

                tracingService.Trace($"SolutionName: {solutionName}");

                var solutionId = GetSolutionId(service, solutionName, tracingService);
                tracingService.Trace($"SolutionId: {solutionId}");

                var entityMetadatas = GetEntitiesInSolution(service, solutionId, tracingService);
                tracingService.Trace($"Entities found: {entityMetadatas.Count}");

                var fieldMetadatas = GetFieldsInSolution(service, solutionId, entityMetadatas, tracingService);
                tracingService.Trace($"Fields found: {fieldMetadatas.Count}");

                var webResources = GetWebResourcesInSolution(service, solutionId, tracingService);
                tracingService.Trace($"Web resources found: {webResources.Count}");

                // Annotate fields with form/section/tab/visibility info
                foreach (var entity in entityMetadatas)
                {
                    var allLocations = FormFieldInspector.GetAllFieldsWithVisibility(service, entity.LogicalName);
                    foreach (var field in fieldMetadatas.Where(f => f.EntityName == entity.LogicalName))
                    {
                        field.FormLocations = allLocations
                            .Where(loc => loc.FieldName == field.SchemaName)
                            .Select(loc => new FieldFormLocation
                            {
                                FormName = loc.FormName,
                                TabName = loc.TabName,
                                TabVisible = loc.TabVisible,
                                SectionName = loc.SectionName,
                                SectionVisible = loc.SectionVisible,
                                FieldVisible = loc.FieldVisible,
                                FieldName = loc.FieldName
                            })
                            .ToList();
                    }
                }

                var scriptReferences = AnalyzeScripts(fieldMetadatas, webResources, tracingService);

                var docBytes = GenerateJsonDocument(fieldMetadatas, scriptReferences);

                var noteId = StoreDocumentAsNote(service, docBytes, "DataDictionary.json", "Data Dictionary generated by plug-in.", tracingService);

                context.OutputParameters["NoteId"] = noteId;

                tracingService.Trace("DataDictionaryPlugin execution completed successfully.");
            }
            catch (Exception ex)
            {
                tracingService?.Trace($"Exception: {ex}");
                throw new InvalidPluginExecutionException("An error occurred in DataDictionaryPlugin: " + ex.Message, ex);
            }
        }

        private byte[] GenerateCsvDocument(List<FieldMetadata> fields, Dictionary<string, List<string>> scriptReferences)
        {
            var sb = new StringBuilder();
            sb.AppendLine("EntityName,SchemaName,DisplayName,Type,RequiredLevel,Description,MaxLength,Precision,MinValue,MaxValue,FormName,TabName,TabVisible,SectionName,SectionVisible,FieldVisible,ScriptReferences");

            foreach (var field in fields)
            {
                var scriptRefs = scriptReferences.ContainsKey(field.SchemaName) ? string.Join(";", scriptReferences[field.SchemaName]) : "";
                if (field.FormLocations != null && field.FormLocations.Count > 0)
                {
                    foreach (var loc in field.FormLocations)
                    {
                        sb.AppendLine($"\"{field.EntityName}\",\"{field.SchemaName}\",\"{field.DisplayName}\",\"{field.Type}\",\"{field.RequiredLevel}\",\"{field.Description}\",\"{field.MaxLength}\",\"{field.Precision}\",\"{field.MinValue}\",\"{field.MaxValue}\",\"{loc.FormName}\",\"{loc.TabName}\",\"{loc.TabVisible}\",\"{loc.SectionName}\",\"{loc.SectionVisible}\",\"{loc.FieldVisible}\",\"{scriptRefs}\"");
                    }
                }
                else
                {
                    sb.AppendLine($"\"{field.EntityName}\",\"{field.SchemaName}\",\"{field.DisplayName}\",\"{field.Type}\",\"{field.RequiredLevel}\",\"{field.Description}\",\"{field.MaxLength}\",\"{field.Precision}\",\"{field.MinValue}\",\"{field.MaxValue}\",\"\",\"\",\"\",\"\",\"\",\"\",\"{scriptRefs}\"");
                }
            }
            return Encoding.UTF8.GetBytes(sb.ToString());
        }

        private Guid GetSolutionId(IOrganizationService service, string solutionName, ITracingService tracingService)
        {
            try
            {
                var query = new QueryExpression("solution")
                {
                    ColumnSet = new ColumnSet("solutionid"),
                    Criteria = { Conditions = { new ConditionExpression("uniquename", ConditionOperator.Equal, solutionName) } }
                };
                var result = service.RetrieveMultiple(query).Entities.FirstOrDefault();
                if (result == null)
                    throw new InvalidPluginExecutionException($"Solution '{solutionName}' not found.");
                return result.Id;
            }
            catch (Exception ex)
            {
                tracingService.Trace($"GetSolutionId failed: {ex}");
                throw;
            }
        }

        private List<EntityMetadata> GetEntitiesInSolution(IOrganizationService service, Guid solutionId, ITracingService tracingService)
        {
            var entities = new List<EntityMetadata>();
            try
            {
                var query = new QueryExpression("solutioncomponent")
                {
                    ColumnSet = new ColumnSet("objectid"),
                    Criteria =
                    {
                        Conditions =
                        {
                            new ConditionExpression("solutionid", ConditionOperator.Equal, solutionId),
                            new ConditionExpression("componenttype", ConditionOperator.Equal, 1) // 1 = Entity
                        }
                    }
                };
                var entityIds = service.RetrieveMultiple(query).Entities.Select(e => (Guid)e["objectid"]).ToList();

                foreach (var entityId in entityIds)
                {
                    try
                    {
                        var req = new RetrieveEntityRequest
                        {
                            MetadataId = entityId,
                            EntityFilters = EntityFilters.Entity
                        };
                        var resp = (RetrieveEntityResponse)service.Execute(req);
                        if (resp?.EntityMetadata != null)
                            entities.Add(resp.EntityMetadata);
                    }
                    catch (Exception ex)
                    {
                        tracingService.Trace($"Failed to retrieve entity metadata for {entityId}: {ex}");
                    }
                }
            }
            catch (Exception ex)
            {
                tracingService.Trace($"GetEntitiesInSolution failed: {ex}");
                throw;
            }
            return entities;
        }

        private List<FieldMetadata> GetFieldsInSolution(IOrganizationService service, Guid solutionId, List<EntityMetadata> entityMetadatas, ITracingService tracingService)
        {
            var fields = new List<FieldMetadata>();
            try
            {
                var query = new QueryExpression("solutioncomponent")
                {
                    ColumnSet = new ColumnSet("objectid"),
                    Criteria =
                    {
                        Conditions =
                        {
                            new ConditionExpression("solutionid", ConditionOperator.Equal, solutionId),
                            new ConditionExpression("componenttype", ConditionOperator.Equal, 2) // 2 = Attribute (field)
                        }
                    }
                };
                var attributeIds = service.RetrieveMultiple(query).Entities.Select(e => (Guid)e["objectid"]).ToList();

                foreach (var entity in entityMetadatas)
                {
                    try
                    {
                        var req = new RetrieveEntityRequest
                        {
                            LogicalName = entity.LogicalName,
                            EntityFilters = EntityFilters.Attributes
                        };
                        var resp = (RetrieveEntityResponse)service.Execute(req);
                        if (resp?.EntityMetadata?.Attributes == null)
                            continue;

                        foreach (var attr in resp.EntityMetadata.Attributes)
                        {
                            if (attributeIds.Contains(attr.MetadataId.GetValueOrDefault()) || (attr.IsCustomAttribute ?? false))
                            {
                                var field = new FieldMetadata
                                {
                                    EntityName = entity.LogicalName,
                                    SchemaName = attr.LogicalName,
                                    DisplayName = attr.DisplayName?.UserLocalizedLabel?.Label ?? attr.LogicalName,
                                    Type = attr.AttributeTypeName?.Value ?? attr.AttributeType?.ToString() ?? "",
                                    RequiredLevel = attr.RequiredLevel?.Value.ToString() ?? "",
                                    Description = attr.Description?.UserLocalizedLabel?.Label ?? ""
                                };

                                // Extract size/precision
                                if (attr is StringAttributeMetadata s)
                                {
                                    field.MaxLength = s.MaxLength;
                                }
                                else if (attr is MemoAttributeMetadata m)
                                {
                                    field.MaxLength = m.MaxLength;
                                }
                                else if (attr is DecimalAttributeMetadata d)
                                {
                                    field.Precision = d.Precision;
                                    field.MinValue = d.MinValue.HasValue ? (int?)d.MinValue.Value : null;
                                    field.MaxValue = d.MaxValue.HasValue ? (int?)d.MaxValue.Value : null;
                                }
                                else if (attr is IntegerAttributeMetadata i)
                                {
                                    field.MinValue = i.MinValue;
                                    field.MaxValue = i.MaxValue;
                                }
                                else if (attr is DoubleAttributeMetadata dbl)
                                {
                                    field.Precision = dbl.Precision;
                                    field.MinValue = dbl.MinValue.HasValue ? (int?)dbl.MinValue.Value : null;
                                    field.MaxValue = dbl.MaxValue.HasValue ? (int?)dbl.MaxValue.Value : null;
                                }
                                // Add more types as needed

                                fields.Add(field);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        tracingService.Trace($"Failed to retrieve attributes for entity {entity.LogicalName}: {ex}");
                    }
                }
            }
            catch (Exception ex)
            {
                tracingService.Trace($"GetFieldsInSolution failed: {ex}");
                throw;
            }
            return fields;
        }

        private List<WebResourceInfo> GetWebResourcesInSolution(IOrganizationService service, Guid solutionId, ITracingService tracingService)
        {
            var webResources = new List<WebResourceInfo>();
            try
            {
                var query = new QueryExpression("solutioncomponent")
                {
                    ColumnSet = new ColumnSet("objectid"),
                    Criteria =
                    {
                        Conditions =
                        {
                            new ConditionExpression("solutionid", ConditionOperator.Equal, solutionId),
                            new ConditionExpression("componenttype", ConditionOperator.Equal, 61) // 61 = Web Resource
                        }
                    }
                };
                var webResourceIds = service.RetrieveMultiple(query).Entities.Select(e => (Guid)e["objectid"]).ToList();

                foreach (var id in webResourceIds)
                {
                    try
                    {
                        var wr = service.Retrieve("webresource", id, new ColumnSet("name", "displayname", "description", "content", "webresourcetype"));
                        if (wr.Contains("webresourcetype") && ((OptionSetValue)wr["webresourcetype"]).Value == 3)
                        {
                            var content = wr.Contains("content") ? wr["content"] as string : null;
                            webResources.Add(new WebResourceInfo
                            {
                                Id = id,
                                Name = wr.GetAttributeValue<string>("name"),
                                DisplayName = wr.GetAttributeValue<string>("displayname"),
                                Description = wr.GetAttributeValue<string>("description"),
                                Content = content != null ? Encoding.UTF8.GetString(Convert.FromBase64String(content)) : ""
                            });
                        }
                    }
                    catch (Exception ex)
                    {
                        tracingService.Trace($"Failed to retrieve web resource {id}: {ex}");
                    }
                }
            }
            catch (Exception ex)
            {
                tracingService.Trace($"GetWebResourcesInSolution failed: {ex}");
                throw;
            }
            return webResources;
        }

        private Dictionary<string, List<string>> AnalyzeScripts(List<FieldMetadata> fields, List<WebResourceInfo> webResources, ITracingService tracingService)
        {
            var result = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);
            try
            {
                foreach (var field in fields)
                {
                    foreach (var wr in webResources)
                    {
                        if (string.IsNullOrEmpty(wr.Content))
                            continue;
                        var pattern = $@"\b{Regex.Escape(field.SchemaName)}\b";
                        if (Regex.IsMatch(wr.Content, pattern, RegexOptions.IgnoreCase))
                        {
                            if (!result.ContainsKey(field.SchemaName))
                                result[field.SchemaName] = new List<string>();
                            result[field.SchemaName].Add(wr.Name);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                tracingService.Trace($"AnalyzeScripts failed: {ex}");
                throw;
            }
            return result;
        }

        private byte[] GenerateJsonDocument(List<FieldMetadata> fields, Dictionary<string, List<string>> scriptReferences)
        {
            var entries = fields.Select(f => new DataDictionaryEntry
            {
                EntityName = f.EntityName,
                SchemaName = f.SchemaName,
                DisplayName = f.DisplayName,
                Type = f.Type,
                RequiredLevel = f.RequiredLevel,
                Description = f.Description,
                MaxLength = f.MaxLength,
                Precision = f.Precision,
                MinValue = f.MinValue,
                MaxValue = f.MaxValue,
                FormLocations = f.FormLocations,
                ScriptReferences = scriptReferences.ContainsKey(f.SchemaName) ? scriptReferences[f.SchemaName] : new List<string>()
            }).ToList();

            var serializer = new DataContractJsonSerializer(typeof(List<DataDictionaryEntry>));
            using (var ms = new MemoryStream())
            {
                serializer.WriteObject(ms, entries);
                return ms.ToArray();
            }
        }

        private Guid StoreDocumentAsNote(IOrganizationService service, byte[] docBytes, string fileName, string noteText, ITracingService tracingService)
        {
            try
            {
                var note = new Entity("annotation");
                note["subject"] = fileName;
                note["notetext"] = noteText;
                note["filename"] = fileName;
                note["mimetype"] = "application/json";
                note["documentbody"] = Convert.ToBase64String(docBytes);
                return service.Create(note);
            }
            catch (Exception ex)
            {
                tracingService.Trace($"StoreDocumentAsNote failed: {ex}");
                throw;
            }
        }

        [DataContract]
        private class DataDictionaryEntry
        {
            [DataMember] public string EntityName { get; set; }
            [DataMember] public string SchemaName { get; set; }
            [DataMember] public string DisplayName { get; set; }
            [DataMember] public string Type { get; set; }
            [DataMember] public string RequiredLevel { get; set; }
            [DataMember] public string Description { get; set; }
            [DataMember] public int? MaxLength { get; set; }
            [DataMember] public int? Precision { get; set; }
            [DataMember] public int? MinValue { get; set; }
            [DataMember] public int? MaxValue { get; set; }
            [DataMember] public List<FieldFormLocation> FormLocations { get; set; }
            [DataMember] public List<string> ScriptReferences { get; set; }
        }

        [DataContract]
        public class FieldFormLocation
        {
            [DataMember] public string FormName { get; set; }
            [DataMember] public string TabName { get; set; }
            [DataMember] public bool TabVisible { get; set; }
            [DataMember] public string SectionName { get; set; }
            [DataMember] public bool SectionVisible { get; set; }
            [DataMember] public bool FieldVisible { get; set; }
            [DataMember] public string FieldName { get; set; }
        }

        private class FieldMetadata
        {
            public string EntityName { get; set; }
            public string SchemaName { get; set; }
            public string DisplayName { get; set; }
            public string Type { get; set; }
            public string RequiredLevel { get; set; }
            public string Description { get; set; }
            public int? MaxLength { get; set; }
            public int? Precision { get; set; }
            public int? MinValue { get; set; }
            public int? MaxValue { get; set; }
            public List<FieldFormLocation> FormLocations { get; set; } = new List<FieldFormLocation>();
            public List<string> ScriptReferences { get; set; } = new List<string>();
        }

        private class WebResourceInfo
        {
            public Guid Id { get; set; }
            public string Name { get; set; }
            public string DisplayName { get; set; }
            public string Description { get; set; }
            public string Content { get; set; }
        }
    }

    // Helper for form/field/section/tab visibility
    public static class FormFieldInspector
    {
        public class FieldOnFormSection
        {
            public string FormName { get; set; }
            public string TabName { get; set; }
            public bool TabVisible { get; set; }
            public string SectionName { get; set; }
            public bool SectionVisible { get; set; }
            public string FieldName { get; set; }
            public bool FieldVisible { get; set; }
        }

        public static List<FieldOnFormSection> GetAllFieldsWithVisibility(IOrganizationService service, string entityLogicalName)
        {
            var result = new List<FieldOnFormSection>();

            var query = new QueryExpression("systemform")
            {
                ColumnSet = new ColumnSet("name", "formxml"),
                Criteria =
                {
                    Conditions =
                    {
                        new ConditionExpression("objecttypecode", ConditionOperator.Equal, entityLogicalName),
                        new ConditionExpression("type", ConditionOperator.Equal, 2) // Main form
                    }
                }
            };

            var forms = service.RetrieveMultiple(query).Entities;

            foreach (var form in forms)
            {
                var formName = form.GetAttributeValue<string>("name");
                var formXml = form.GetAttributeValue<string>("formxml");
                if (string.IsNullOrEmpty(formXml)) continue;

                var xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(formXml);

                var tabNodes = xmlDoc.SelectNodes("//tab");
                foreach (XmlNode tabNode in tabNodes)
                {
                    var tabName = tabNode.Attributes["name"]?.Value ?? "";
                    var tabVisible = tabNode.Attributes["visible"] == null || tabNode.Attributes["visible"].Value != "false";

                    var sectionNodes = tabNode.SelectNodes(".//section");
                    foreach (XmlNode sectionNode in sectionNodes)
                    {
                        var sectionName = sectionNode.Attributes["name"]?.Value ?? "";
                        var sectionVisible = sectionNode.Attributes["visible"] == null || sectionNode.Attributes["visible"].Value != "false";

                        var controlNodes = sectionNode.SelectNodes(".//control[@datafieldname]");
                        foreach (XmlNode controlNode in controlNodes)
                        {
                            var fieldName = controlNode.Attributes["datafieldname"]?.Value;
                            if (string.IsNullOrEmpty(fieldName)) continue;

                            var fieldVisible = controlNode.Attributes["visible"] == null || controlNode.Attributes["visible"].Value != "false";

                            result.Add(new FieldOnFormSection
                            {
                                FormName = formName,
                                TabName = tabName,
                                TabVisible = tabVisible,
                                SectionName = sectionName,
                                SectionVisible = sectionVisible,
                                FieldName = fieldName,
                                FieldVisible = fieldVisible
                            });
                        }
                    }
                }
            }
            return result;
        }
    }
}